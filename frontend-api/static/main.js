const token = localStorage.getItem("token");
const API_FLIGHTS = "http://localhost:8000/flights";
const API_AUTH = "http://localhost:8082/me";
const API_GATEWAY = "http://localhost:8084/parse";

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ API_KEY –∏ API_ADMIN_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –≤–∞—à–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
const API_KEY = "TNUr9MZK3Sgmy5hswnJGCExvH7VacRbpFDP6YA4Wuf8dj"; // –í–∞—à API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const API_ADMIN_KEY = "khyWYbSHGjxUd98J2BwR4fNPrpgXv6ztZVmDAELqCs7Kc"; // API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏

let isAdmin = false;
let sortKey = null;
let sortDirection = 1;
let flights = [];
let editId = null;

if (!token) window.location.href = "login.html";

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
document.getElementById("logoutBtn").onclick = () => {
    localStorage.removeItem("token");
    window.location.href = "login.html";
};

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.getElementById("toggleTheme").onclick = () => {
    const html = document.documentElement;
    const current = html.getAttribute("data-theme");
    const next = current === "dark" ? "light" : "dark";
    html.setAttribute("data-theme", next);
    localStorage.setItem("theme", next);
    applyTheme();
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
function applyTheme() {
    const theme = localStorage.getItem("theme") || "light";
    document.documentElement.setAttribute("data-theme", theme);
    const isDark = theme === "dark";

    // body
    document.body.className = isDark ? "bg-gray-900 text-white" : "bg-gray-50 text-gray-800";

    // –∏–Ω–ø—É—Ç—ã, —Å–µ–ª–µ–∫—Ç—ã
    document.querySelectorAll("input, select, textarea").forEach(el => {
        el.classList.remove("bg-white", "text-gray-800", "border-gray-300", "bg-gray-800", "text-white", "border-gray-600");
        if (isDark) {
            el.classList.add("bg-gray-800", "text-white", "border-gray-600");
        } else {
            el.classList.add("bg-white", "text-gray-800", "border-gray-300");
        }
    });

    // –∏–∫–æ–Ω–∫–∞ üåô/‚òÄÔ∏è
    const icon = document.getElementById("themeIcon");
    if (icon) {
        icon.textContent = isDark ? "üåô" : "‚òÄÔ∏è";
    }
}

// –ß–∞—Å—ã
function startClock() {
    setInterval(() => {
        const now = new Date();
        const months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ];
        const dateStr = `${now.getDate()} ${months[now.getMonth()]} ${now.getFullYear()} –≥–æ–¥–∞`;
        const timeStr = now.toLocaleTimeString("ru-RU", { hour12: false });
        document.getElementById("dateBox").textContent = dateStr;
        document.getElementById("timeBox").textContent = timeStr;
    }, 1000);
}

document.getElementById("statusFilter").onchange = renderFlights;
document.getElementById("sortDeparture").onclick = () => toggleSort("departure_time");
document.getElementById("sortArrival").onclick = () => toggleSort("arrival_time");
document.getElementById("sortNumber").onclick = () => toggleSort("number");
document.getElementById("sortOrigin").onclick = () => toggleSort("origin");
document.getElementById("sortDestination").onclick = () => toggleSort("destination");

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
function toggleSort(key) {
    if (sortKey === key) sortDirection *= -1;
    else {
        sortKey = key;
        sortDirection = 1;
    }
    renderFlights();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(isoString) {
    const date = new Date(isoString);
    const options = {
        day: '2-digit',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
    };
    return date.toLocaleString("ru-RU", options);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
async function init() {
    applyTheme();
    startClock();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const res = await fetch(API_AUTH, {
        headers: { Authorization: `Bearer ${token}` },
    });
    const user = await res.json();
    isAdmin = user.role === "admin";
    isUser = user.role === "user";

    if (isAdmin) {
        document.getElementById("adminPanel")?.classList.remove("hidden");
    }
    if (isUser) {
        document.getElementById("th-actions")?.classList.add("hidden"); // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è user
    } else {
        document.getElementById("th-actions")?.classList.remove("hidden"); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è admin
    }

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤
    const flightRes = await fetch(API_FLIGHTS, {
        headers: {
            "Content-Type": "application/json",
            "API-Key": API_KEY // –î–æ–±–∞–≤–ª–µ–Ω API_KEY –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        }
    });
    flights = await flightRes.json();
    renderFlights();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤
function renderFlights() {
    const filter = document.getElementById("statusFilter").value;
    let filtered = [...flights];

    if (filter !== "all") {
        filtered = filtered.filter(f => f.status === filter);
    }

    if (sortKey) {
        filtered.sort((a, b) => (a[sortKey] > b[sortKey] ? sortDirection : -sortDirection));
    }

    const tbody = document.getElementById("flightTableBody");
    tbody.innerHTML = "";

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    const isDark = document.documentElement.getAttribute("data-theme") === "dark";

    filtered.forEach(f => {
        const row = document.createElement("tr");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        const baseTdClass = isDark
            ? "p-3 bg-gray-800 text-gray-100 border-b border-gray-700"  // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            : "p-3 bg-white text-gray-800 border-b border-gray-200";    // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞

        const statusColor = {
            "scheduled": isDark ? "bg-gray-700 text-gray-100" : "bg-gray-100 text-gray-800",
            "active": isDark ? "bg-blue-700 text-blue-100" : "bg-blue-100 text-blue-800",
            "landed": isDark ? "bg-green-700 text-green-100" : "bg-green-100 text-green-800",
            "delayed": isDark ? "bg-yellow-700 text-yellow-100" : "bg-yellow-100 text-yellow-800",
            "cancelled": isDark ? "bg-red-700 text-red-100" : "bg-red-100 text-red-800",
        }[f.status.toLowerCase()] || (isDark ? "bg-gray-700 text-gray-100" : "bg-gray-100 text-gray-800");

        row.innerHTML = `
          <td class="${baseTdClass}">${f.number}</td>
          <td class="${baseTdClass}">${f.origin}</td>
          <td class="${baseTdClass}">${f.destination}</td>
          <td class="${baseTdClass}">${formatDateTime(f.departure_time)}</td>
          <td class="${baseTdClass}">${formatDateTime(f.arrival_time)}</td>
          <td class="${baseTdClass} status-overlay"><span class="px-3 py-1 rounded-full ${statusColor} text-sm font-medium">${f.status}</span></td>
          <td class="${baseTdClass} text-center actions">
            ${isAdmin ? `
              <button onclick="editFlight(${f.id})" class="text-blue-500 hover:underline">‚úèÔ∏è</button>
              <button onclick="deleteFlight(${f.id})" class="text-red-500 hover:underline ml-2">üóëÔ∏è</button>
            ` : ""}
          </td>
        `;

        // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if (!isAdmin) {
            row.classList.add("user-row");
        }

        tbody.appendChild(row);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞
// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞
async function createFlight() {
    const body = {
        number: document.getElementById("f_number").value,
        origin: document.getElementById("f_origin").value,
        destination: document.getElementById("f_dest").value,
        departure_time: document.getElementById("f_departure").value,
        arrival_time: document.getElementById("f_arrival").value,
        status: document.getElementById("f_status").value,
    };

    const res = await fetch(API_FLIGHTS, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            "API-Key": API_KEY
        },
        body: JSON.stringify(body),
    });

    if (res.ok) {
        await init();
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞");
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞
async function deleteFlight(id) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å?")) return;

    await fetch(`${API_FLIGHTS}/${id}`, {
        method: "DELETE",
        headers: {
            Authorization: `Bearer ${token}`,
            "API-Key": API_KEY
        },
    });

    await init();
}

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–µ–π—Å—ã
async function deletePastFlights() {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–∏–ª–µ—Ç–µ–ª–∏?")) return;

    const res = await fetch("http://localhost:8000/flights/past", {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}`, "API-Key": API_KEY },
    });

    if (res.ok) {
        alert("–ü—Ä–æ—à–µ–¥—à–∏–µ —Ä–µ–π—Å—ã —É–¥–∞–ª–µ–Ω—ã");
        await init();
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
}

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã
async function deleteAllFlights() {
    if (!confirm("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?")) return;

    const res = await fetch("http://localhost:8000/flights/all", {
        method: "DELETE",
        headers: {
            Authorization: `Bearer ${token}`,
            "API-Key": API_KEY
        }
    });

    if (res.ok) {
        alert("–í—Å–µ —Ä–µ–π—Å—ã —É–¥–∞–ª–µ–Ω—ã");
        await init();  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤
    } else {
        const error = await res.json();
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
}
// –í–Ω–µ—à–Ω–µ–µ API - –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–æ–≤ –ø–æ ICAO –∫–æ–¥—É
async function loadExternalFlights() {
    const icao = document.getElementById("icaoInput").value.trim().toUpperCase();
    if (!icao) return alert("–í–≤–µ–¥–∏—Ç–µ ICAO –∫–æ–¥");

    const res = await fetch(`${API_GATEWAY}?icao=${icao}`, {
        headers: {
            "Content-Type": "application/json",
            "API-Key": API_KEY
        }
    });
    if (res.ok) {
        const msg = await res.text();
        alert(msg);
        await init(); // –æ–±–Ω–æ–≤–∏–º —Ç–∞–±–ª–∏—Ü—É
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Å–æ–≤");
    }
}
async function addAdmin() {
    const username = document.getElementById("admin_username").value.trim();
    const password = document.getElementById("admin_password").value.trim();

    if (!username || !password) return alert("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å");

    const res = await fetch("http://localhost:8082/register", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "API-Key": API_ADMIN_KEY
        },
        body: JSON.stringify({ username, password, role: "admin" }),
    });

    if (res.ok) {
        alert("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω");
        document.getElementById("admin_username").value = "";
        document.getElementById("admin_password").value = "";
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    }
}
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞
function editFlight(id) {
    const flight = flights.find(f => f.id === id);
    if (!flight) return;

    editId = id;
    document.getElementById("edit_number").value = flight.number;
    document.getElementById("edit_origin").value = flight.origin;
    document.getElementById("edit_dest").value = flight.destination;
    document.getElementById("edit_departure").value = flight.departure_time;
    document.getElementById("edit_arrival").value = flight.arrival_time;
    document.getElementById("edit_status").value = flight.status;

    document.getElementById("editModal").classList.remove("hidden");
}

function closeModal() {
    document.getElementById("editModal").classList.add("hidden");
}

async function saveEdit() {
    const body = {
        number: document.getElementById("edit_number").value,
        origin: document.getElementById("edit_origin").value,
        destination: document.getElementById("edit_dest").value,
        departure_time: document.getElementById("edit_departure").value,
        arrival_time: document.getElementById("edit_arrival").value,
        status: document.getElementById("edit_status").value,
    };

    const res = await fetch(`${API_FLIGHTS}/${editId}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
            "API-Key": API_KEY
        },
        body: JSON.stringify(body),
    });

    if (res.ok) {
        closeModal();
        await init();
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
    }
}
init();
