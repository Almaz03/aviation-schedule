package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
)

const API_KEY = "TNUr9MZK3Sgmy5hswnJGCExvH7VacRbpFDP6YA4Wuf8dj"
const AVIATIONSTACK_API = "fb44e5a1b5ad5e0838894ba916c1c241"

type Flight struct {
	FlightDate   string `json:"flight_date"`
	FlightNumber struct {
		IATA string `json:"iata"` // flight_iata
	} `json:"flight"`
	Departure struct {
		Airport   string `json:"airport"`
		Scheduled string `json:"scheduled"`
	} `json:"departure"`
	Arrival struct {
		Airport   string `json:"airport"`
		Scheduled string `json:"scheduled"`
	} `json:"arrival"`
	Status string `json:"flight_status"`
}

func GetFlightsFromAirport(icaoCode string) ([]Flight, error) {
	url := fmt.Sprintf("https://api.aviationstack.com/v1/flights?access_key=%s&dep_icao=%s", AVIATIONSTACK_API, icaoCode)

	resp, err := http.Get(url)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", err)
		return nil, err
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	var flightsResponse struct {
		Data []Flight `json:"data"`
	}

	err = json.Unmarshal(body, &flightsResponse)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON:", err)
		return nil, err
	}

	return flightsResponse.Data, nil
}

func postToFlightAPI(f Flight) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body := map[string]interface{}{
		"number":         f.FlightNumber.IATA,
		"origin":         f.Departure.Airport,
		"destination":    f.Arrival.Airport,
		"departure_time": f.Departure.Scheduled,
		"arrival_time":   f.Arrival.Scheduled,
		"status":         f.Status,
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–ª–æ –≤ JSON
	jsonData, err := json.Marshal(body)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err)
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ flight-api –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
	req, err := http.NewRequest("POST", "http://localhost:8000/flights", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("API-Key", API_KEY)                    // API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	req.Header.Set("Authorization", "Bearer admin-token") // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return err
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		responseText, _ := io.ReadAll(resp.Body)
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ %d: %s\n", resp.StatusCode, responseText)
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API: %s", responseText)
	}

	log.Println("‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.")
	return nil
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
func checkAPIKey(r *http.Request) bool {
	apiKey := r.Header.Get("API-Key")
	return apiKey == API_KEY
}

func handler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "http://localhost:8083") // —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ localhost:8083
	w.Header().Set("Access-Control-Allow-Credentials", "true")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization, API-Key")
	w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ OPTIONS –∑–∞–ø—Ä–æ—Å—ã
	if r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusNoContent) // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ OPTIONS –∑–∞–ø—Ä–æ—Å
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
	if !checkAPIKey(r) {
		http.Error(w, "Forbidden: Invalid API Key", http.StatusForbidden)
		return
	}

	icao := r.URL.Query().Get("icao")
	if icao == "" {
		http.Error(w, "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ?icao=XXX", http.StatusBadRequest)
		return
	}

	fmt.Printf("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–æ–≤ —Å ICAO: %s...\n", icao)
	flights, err := GetFlightsFromAirport(icao)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω–µ—à–Ω–µ–≥–æ API", http.StatusInternalServerError)
		return
	}

	success := 0
	fail := 0
	for _, f := range flights {
		err := postToFlightAPI(f)
		if err == nil {
			success++
		} else {
			fail++
		}
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ: %d, ‚ùå –û—à–∏–±–∫–∏: %d (–∏–∑ %d —Ä–µ–π—Å–æ–≤)\n", success, fail, len(flights))

	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	fmt.Fprintf(w, "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: %d —Ä–µ–π—Å–æ–≤\n‚ùå –û—à–∏–±–∫–∏: %d\nüì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d\n\nICAO: %s\n",
		success, fail, len(flights), icao)
}

func main() {
	http.HandleFunc("/parse", handler)
	fmt.Println("üöÄ Gateway –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8084")
	log.Fatal(http.ListenAndServe(":8084", nil))
}
